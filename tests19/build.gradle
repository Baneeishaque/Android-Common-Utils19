apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

android {

    compileSdk 34
    useLibrary 'org.apache.http.legacy'

    defaultConfig {

        applicationId "ndk.utils_android19.tests"

        minSdkVersion 19
        targetSdkVersion 34

        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

        multiDexEnabled true
    }

    buildTypes {

        staging {

            initWith release
            debuggable true
        }
    }

    // Specifies flavor dimension.
    flavorDimensions "relevence"
    productFlavors {

        // When building a variant that uses this flavor, the following configurations override those in the defaultConfig block.

        development {

            dimension "relevence"

            // To avoid using legacy multidex when building from the command line, set minSdkVersion to 21 or higher. When using Android Studio 2.3 or higher, the build automatically avoids legacy multidex when deploying to a device running API level 21 or higherâ€”regardless of what you set as your minSdkVersion.
//            minSdkVersion 21

            // The following configuration limits the usage of mdpi screen-density resources.
            resConfigs "mdpi"
        }

        production {

            dimension "relevence"
            // If you've configured the defaultConfig block for the release version of your app, you can leave this block empty and Gradle uses configurations in the defaultConfig block instead. You still need to create this flavor. Otherwise, all variants use the "development" flavor configurations.
        }
    }

    variantFilter { variant ->

        def names = variant.flavors*.name

        // To check for a certain build type, use variant.buildType.name == "<buildType>"
        if (names.contains("development") && names.contains("release")) {

            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }

        if (names.contains("production") && names.contains("debug")) {

            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }

        if (names.contains("development") && names.contains("staging")) {

            // Gradle ignores any variants that satisfy the conditions above.
            setIgnore(true)
        }
    }

//    viewBinding.enabled = true

    kotlinOptions {

        jvmTarget = '17'
    }

//    dataBinding {
//
//        enabled = true
//    }

//    androidExtensions {
//
//        experimental = true
//    }

    lintOptions {
        checkReleaseBuilds false
        abortOnError false
    }
    namespace 'ndk.utils_android19.tests'
}

dependencies {

    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation 'androidx.appcompat:appcompat:1.6.1'

    implementation project(path: ':Utils19:common19')

    implementation project(path: ':Utils16:common16')
    implementation project(path: ':Utils14:common14')

    implementation 'junit:junit:4.13.2'
    implementation 'androidx.test.ext:junit:1.1.5'
    implementation 'androidx.test:rules:1.5.0'
}

kotlin {
    jvmToolchain(17)
}
